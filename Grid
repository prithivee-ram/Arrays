NUMBER OF ISLANDS
-----------------
class Solution {
    public int numIslands(char[][] grid) {
        
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == '1')
                {
                    count++;
                    dfs(grid, i, j);
                }
            }
        }
        
        return count;
    }
    
    public void dfs(char[][] grid, int i, int j)
    {
        int m = grid.length;
        int n = grid[0].length;
        
        if(i < 0 || j < 0 || i >= m || j >= n || grid[i][j] == '0')
            return;
        
        grid[i][j] = '0';
        
        dfs(grid, i+1, j);
        dfs(grid, i-1, j);
        dfs(grid, i, j+1);
        dfs(grid, i, j-1);
    }
}

NUMBER OF DISTINCT ISLANDS
--------------------------
class Solution {
    public int numDistinctIslands(int[][] grid) {
        
        if(grid == null || grid.length == 0 || grid[0].length == 0)
            return 0;
        
        int m = grid.length;
        int n = grid[0].length;
        
        Set<String> s = new HashSet<String>();
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                Set<String> s1 = new HashSet<String>();
                if(grid[i][j] == 1)
                {
                    dfs(grid, i, j, i, j, s1);
                    s.add(s1.toString());
                }
            }
        }
        
        return s.size();
    }
    
    public void dfs(int[][] grid, int i, int j, int basex, int basey, Set<String> s)
    {
        int m = grid.length;
        int n = grid[0].length;
        
        if(i < 0 || j < 0 || i >= m || j >= n || grid[i][j] == 0)
            return;
        
        s.add((i - basex) + "-" + (j - basey));
        
        grid[i][j] = 0;
        dfs(grid, i+1, j, basex, basey, s);
        dfs(grid, i-1, j, basex, basey, s);
        dfs(grid, i, j+1, basex, basey, s);
        dfs(grid, i, j-1, basex, basey, s);
    }
}


NUMBER OF CONNECTED NODES
-------------------------
class Solution {
    public int countComponents(int n, int[][] edges) {
        
        int count = 0;
        
        if(n <= 1)
            return n;
        
        // Map for nodes and connecting nodes
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        
        for(int i = 0; i < n; i++)
        {
            map.put(i, new ArrayList<Integer>());
        }
        
        for(int[] edge : edges)
        {
            map.get(edge[0]).add(edge[1]);
            map.get(edge[1]).add(edge[0]);
        }
        
        //Set for marking a node visited
        HashSet<Integer> visited = new HashSet<>();
        
        for(int i = 0; i < n; i++)
        {
            if(visited.add(i))
            {
                dfs(i, visited, map);
                count++;
            }
        }
        
        return count;
    }
    
    public void dfs(int i, HashSet<Integer> visited, HashMap<Integer, List<Integer>> map)
    {
        for(int j : map.get(i))
        {
            if(visited.add(j))
                dfs(j, visited, map);
        }
    }
}

MAX AREA OF ISLAND
------------------
class Solution {
    int countAll;
    public int maxAreaOfIsland(int[][] grid) {
        
        int m = grid.length;
        int n = grid[0].length;
        int max = 0;
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == 1)
                {
                    countAll = 0;
                    dfs(i, j, grid, countAll);
                    max = Math.max(max, countAll);
                }
            }
        }
        
        return max;
    }
    
    public void dfs(int i, int j, int[][] grid, int count)
    {
        int m = grid.length;
        int n = grid[0].length;
        
        if(i >= m || j >= n || i < 0 || j < 0 || grid[i][j] == 0)
            return;
        
        countAll++;
        grid[i][j] = 0;
        
        dfs(i+1, j, grid, count);
        dfs(i, j+1, grid, count);
        dfs(i-1, j, grid, count);
        dfs(i, j-1, grid, count);
    }
}

WALLS & GATES
-------------
class Solution {
    public void wallsAndGates(int[][] rooms) {
        
        if(rooms.length == 0 || rooms[0].length == 0 || rooms == null)
            return;
        
        int m = rooms.length;
        int n = rooms[0].length;
        int distance = 0;
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(rooms[i][j] == 0)
                    dfs(rooms, i, j, distance);
            }
        }
    }
    
    public void dfs(int[][] rooms, int i, int j, int distance)
    {
        int m = rooms.length;
        int n = rooms[0].length;
        
        if(i < 0 || j < 0 || i >= m || j >= n || rooms[i][j] < distance)
            return;
        
        rooms[i][j] = distance;
        
        dfs(rooms, i+1, j, distance+1);
        dfs(rooms, i-1, j, distance+1);
        dfs(rooms, i, j+1, distance+1);
        dfs(rooms, i, j-1, distance+1);
    }
}

