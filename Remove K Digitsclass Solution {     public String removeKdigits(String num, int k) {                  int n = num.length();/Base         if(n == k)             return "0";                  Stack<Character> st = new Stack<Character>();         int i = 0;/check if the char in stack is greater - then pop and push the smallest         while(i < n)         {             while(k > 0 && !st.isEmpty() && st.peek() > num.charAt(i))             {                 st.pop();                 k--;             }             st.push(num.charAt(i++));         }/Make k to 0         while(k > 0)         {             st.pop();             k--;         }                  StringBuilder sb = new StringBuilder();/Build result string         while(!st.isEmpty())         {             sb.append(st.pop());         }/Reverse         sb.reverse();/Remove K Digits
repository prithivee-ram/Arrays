class Solution {
    public String removeKdigits(String num, int k) {
        
        int n = num.length();
        
        //Base
        if(n == k)
            return "0";
        
        Stack<Character> st = new Stack<Character>();
        int i = 0;
        
        //check if the char in stack is greater - then pop and push the smallest
        while(i < n)
        {
            while(k > 0 && !st.isEmpty() && st.peek() > num.charAt(i))
            {
                st.pop();
                k--;
            }
            st.push(num.charAt(i++));
        }
        
        //Make k to 0
        while(k > 0)
        {
            st.pop();
            k--;
        }
        
        StringBuilder sb = new StringBuilder();
        
        //Build result string
        while(!st.isEmpty())
        {
            sb.append(st.pop());
        }
        
        //Reverse
        sb.reverse();
        
        //Remove 0s
        while(sb.length() > 1 && sb.charAt(0) == '0')
        {
            sb.deleteCharAt(0);
        }
        
        return sb.toString();
    }
}
